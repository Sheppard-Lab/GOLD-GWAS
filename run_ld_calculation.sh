#!/usr/bin/env bash
set -euo pipefail

################################################################################
# run_ld_calculation.sh
#
# 1) Selects the first FASTA in 'input_dir' as the reference genome.
# 2) Treats all other FASTAs in 'input_dir' as assemblies to align with Snippy 
#    in --ctgs mode (no FASTQ reads required).
# 3) Ensures all snippy outputs, runme.sh, core.* files, etc., go into 'output_dir'.
# 4) (Optional) Filters or subsets the multi-sample VCF and runs PLINK for LD analysis.
################################################################################

usage() {
  echo "Usage: $0 -i <input_fasta_dir> -o <output_dir> -p <cpus>"
  exit 1
}

# Parse input arguments
while getopts "i:o:p:" opt; do
  case "$opt" in
    i) input_dir="$OPTARG";;
    o) output_dir="$OPTARG";;
    p) cpus="$OPTARG";;
    *) usage;;
  esac
done

# Check required arguments
if [ -z "${input_dir:-}" ] || [ -z "${output_dir:-}" ] || [ -z "${cpus:-}" ]; then
  usage
fi

# Ensure input directory exists
if [ ! -d "$input_dir" ]; then
  echo "ERROR: Input directory does not exist: $input_dir"
  exit 1
fi

# Create output directory if it doesn't exist
mkdir -p "$output_dir"

echo "Input directory  : $input_dir"
echo "Output directory : $output_dir"
echo "CPUs allocated   : $cpus"
echo

################################################################################
# 1. Select Reference Genome
################################################################################
# We'll pick the first .fna, .fas, or .fasta in input_dir as the reference.
reference=$(ls "$input_dir"/*.{fna,fas,fasta} 2>/dev/null | head -n 1 || true)
if [ -z "$reference" ]; then
  echo "ERROR: No .fna, .fas, or .fasta file found in $input_dir"
  exit 1
fi

echo "Using reference genome: $reference"
echo

################################################################################
# 2. Generate samples.txt in output_dir
################################################################################
samples_file="$output_dir/samples.txt"

if [ -f "$samples_file" ]; then
    echo "$samples_file exists, skipping generation..."
else
    echo "Generating samples.txt..."
    for fa in "$input_dir"/*.{fna,fas,fasta}; do
      # Check if the file exists
      [ -e "$fa" ] || continue

      # Skip the reference genome
      if [ "$(readlink -f "$fa")" == "$(readlink -f "$reference")" ]; then
        continue
      fi

      # Derive sample ID by removing the file extension
      sample_id="$(basename "$fa" | sed 's/\.[^.]*$//')"
      abs_path="$(readlink -f "$fa")"

      # Append to samples.txt (SampleID<TAB>Absolute Path)
      echo -e "${sample_id}\t${abs_path}" >> "$samples_file"
    done

    # Count the number of samples generated
    num_samples=$(wc -l < "$samples_file")
    echo "Generated samples.txt with $num_samples samples."
    head -n 5 "$samples_file"  # Display first 5 entries for verification
    echo "..."
    echo
fi

################################################################################
# 3. Move into output_dir and Run snippy-multi in --ctgs mode
################################################################################
cd "$output_dir"

echo "Running snippy-multi in --ctgs mode..."
snippy-multi "$samples_file" \
  --ref "$reference" \
  --cpus "$cpus" \
  --force > runme.sh

# snippy-multi automatically creates runme.sh in $output_dir
if [ ! -f "runme.sh" ]; then
  echo "ERROR: runme.sh was not generated by snippy-multi. Check Snippy output."
  exit 1
fi

echo "Executing runme.sh..."
bash runme.sh

echo "Snippy analysis completed."
echo

################################################################################
# 4. Merge results with snippy-core (still in output_dir)
################################################################################
echo "Merging core alignments with snippy-core..."
snippy-core --ref "$reference" --prefix core --force ./*/

if [ ! -f "core.vcf" ]; then
  echo "ERROR: core.vcf not found after snippy-core. Check snippy-core logs."
  exit 1
fi

echo "core.vcf generated successfully in $output_dir"
echo

################################################################################
# 5. (Optional) Filter / Subset the multi-sample VCF for LD
################################################################################

# Example: no filtering
cp core.vcf core.filtered.vcf
echo "Using core.filtered.vcf as input to PLINK..."
echo

################################################################################
# 6. Convert to PLINK & Calculate LD
################################################################################
if ! command -v plink &>/dev/null; then
  echo "WARNING: 'plink' not found in PATH. Skipping PLINK steps."
  exit 0
fi

echo "Converting core.filtered.vcf to PLINK format..."
plink --vcf core.filtered.vcf --allow-extra-chr --double-id \
      --make-bed --out plink_data

echo "Calculating pairwise LD (R^2) in PLINK..."
plink --bfile plink_data --allow-extra-chr \
      --ld-window 1000 --ld-window-kb 500 --ld-window-r2 0 \
      --r2 --out ld_results

if [ ! -f "ld_results.ld" ]; then
  echo "ERROR: ld_results.ld not produced. Check PLINK logs."
  exit 1
fi

echo "LD results file found: ld_results.ld"
echo

################################################################################
# 7. Subsample LD for plotting
################################################################################
echo "Subsampling 5% of LD pairs for plotting..."
head -n 1 ld_results.ld > ld_results_sampled.ld
tail -n +2 ld_results.ld | awk 'BEGIN {srand()} rand() <= 0.05' >> ld_results_sampled.ld

################################################################################
# 8. Cleanup Temporary Files
################################################################################
rm -f plink_data.*

echo
echo "LD pipeline completed successfully!"
echo "Key outputs in $output_dir:"
echo " - runme.sh                : Snippy commands for each sample"
echo " - core.vcf                : Multi-sample VCF from snippy-core"
echo " - ld_results.ld           : Full LD results (PLINK)"
echo " - ld_results_sampled.ld   : 5% subset for plotting"
echo
